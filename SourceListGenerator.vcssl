coding UTF-8;

/*
 * ============================================================
 * VCSSL Script for generating/updating "sourcelist.txt"
 * ------------------------------------------------------------
 * This file is released under CC0.
 * Written in 2018-2019 by RINEARN (Fumihiro Matsui)
 * ============================================================
 */

import File;
import Text;


/** コンパイル対象ファイルが含まれるフォルダ（ソースフォルダ）のルート階層のパスです。 */
const string SOURCE_DIRECTORY_PATH = ".";

/** コンパイル対象ファイルを書き出す、出力ファイルのパスです。 */
const string OUTPUT_FILE_PATH = "./sourcelist.txt";

/** 出力内容において、パス先頭の「 ./ 」を削除するかどうかを指定する変数です。 */
const boolean REMOVES_DOTSLASH = true; // true なら削除する

/** 出力内容において、ソースファイルのパスの先頭に付加する文字列です。 */
const string OUTPUT_PREFIX = "";

/** コンパイル対象ファイルの拡張子を指定します。 */
const string FILENAME_EXTENSIONS[] = { ".java" };

/** SOURCE_DIRECTORY_PATH 指定フォルダ内で、コンパイル対象から除外したいサブフォルダのパスを指定します。 */
const string EXCLUDED_DIRECTORY_PATHS[] = { "./META-INF", "./example", "./dev" };

/** コンパイル対象から除外したいファイルにおける、ファイル名の正規表現を指定します。 */
const string EXCLUDED_FILENAME_REGEX[] = { ".*Test.java" };


/**
 * このスクリプトのエントリーポイントです。
 * この関数は、スクリプト起動時に自動で実行されます。
 */
void main() {
	
	// 出力ファイルを開いてIDを取得
	int listOutputFile = open(OUTPUT_FILE_PATH, WRITE);
	
	// コンパイル対象ファイルを検索し、パスを出力ファイルに書き出す
	processDirectory(SOURCE_DIRECTORY_PATH, listOutputFile);
	
	// 出力ファイルを閉じる
	close(listOutputFile);
	
	// 完了メッセージを表示（ユーザーがウィンドウを閉じるとプログラム実行終了）
	pop("\"" + OUTPUT_FILE_PATH + "\" has been successfully generated/updated.");
}


/**
 * 指定されたフォルダ内を再帰的に辿り、
 * コンパイル対象ファイルを抽出して、
 * その相対ファイルパスを出力ファイルに書き出します。
 * 
 * @param dirPath 基準フォルダ
 * @param listOutputFile ファイルパスを書き出す出力ファイルのID
 */
void processDirectory(string dirPath, int listOutputFile) {
	
	// 現在の処理対象フォルダを画面に追記
	println("Traverse dir: " + dirPath);
	
	// フォルダ内の全ファイル名の一覧とファイル数を取得
	string fileNames[] = listdir(dirPath);
	int fileN = length(fileNames);
	
	// フォルダ内のファイルを一つ一つ走査していく
	for (int i=0; i<fileN; i++) {
		
		// ファイル名や相対パスの取得
		string fileName = fileNames[i];
		string filePath = getFilePath(fileName, dirPath, RELATIVE);
		
		// パス区切り文字が「 \ 」の場合は「 / 」に置き換える
		filePath = replaceText(filePath, "\\", "/", ALL);
		
		// フォルダの場合
		if (isdir(filePath)) {
			
			// 除外リストに含まれているフォルダかどうか確認
			bool isExceptDir = false;
			int exceptDirN = length(EXCLUDED_DIRECTORY_PATHS);
			for (int exceptDirIndex=0; exceptDirIndex<exceptDirN; exceptDirIndex++) {
				if (EXCLUDED_DIRECTORY_PATHS[exceptDirIndex] == filePath) {
					isExceptDir = true;
					break;
				}
			}
			
			// 除外リストに含まれてないフォルダなら、再帰で中を辿る
			if (!isExceptDir) {
				processDirectory(filePath, listOutputFile);
			}
			
		// ファイルの場合
		} else {
			processFile(fileName, filePath, listOutputFile);
		}
	}
}


/**
 * 指定されたファイルに対して、書き出し対象か判定した上で、パスを書き出します。
 * 
 * @param fileName 対称ファイルの名称
 * @param filePath 対称ファイルのパス
 * @param listOutputFile ファイルパスを書き出す出力ファイルのID
 */
void processFile(string fileName, string filePath, int listOutputFile) {
	
	// 先頭の ./ を削除するよう指定されている場合は、削除する
	if (REMOVES_DOTSLASH && checkText(filePath, "./", START)) {
		filePath = cropText(filePath, 2, countText(filePath));
	}
	
	// ファイルの拡張子が対象と一致しない場合は、書き出さずに終了
	int extensionN = length(FILENAME_EXTENSIONS);
	for (int i=0; i<extensionN; i++) {
		if (!checkText(fileName, FILENAME_EXTENSIONS[i], END)) {
			return;
		}
	}
	
	// ファイル名が除外指定の正規表現とパターン合致する場合は、書き出さずに終了
	int exceptRegexN = length(EXCLUDED_FILENAME_REGEX);
	for (int i=0; i<exceptRegexN; i++) {
		if (checkText(fileName, EXCLUDED_FILENAME_REGEX[i], FULL_PATTERN)) {
			return;
		}
	}
	
	// 出力時のプレフィックス文字列を付加
	string outputLine = OUTPUT_PREFIX + filePath;
	
	// 対象ファイルのパスを出力ファイルに書き出す
	writeln(listOutputFile, outputLine);
	
	// 書き出したファイルのパスを画面に追記
	println("    Add to the list: " + outputLine);
}

